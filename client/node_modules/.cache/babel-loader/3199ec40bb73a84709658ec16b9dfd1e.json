{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferid\\\\Desktop\\\\Polito\\\\Katya\\\\client\\\\src\\\\components\\\\Student\\\\Student.jsx\";\nimport React, { useContext, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport '../Teacher/Teacher.css';\nimport { Formik } from 'formik';\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router\";\nimport { AuthContext } from \"../../auth/authContext\";\nconst validationSchema = Yup.object().shape({\n  id: Yup.string().required(\"Student Id is required\")\n});\nexport async function handleFetch(id) {\n  let response = await fetch(\"http://localhost:3000/api/students/login\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      id\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response; // GET STUDENT ID FROM SERVER AND SEND IT TO REDUCER\n}\n\nconst Student = () => {\n  const {\n    dispatch\n  } = useContext(AuthContext);\n  const history = useHistory();\n  const [serverError, setServerError] = useState(\"\");\n\n  const loginIn = id => {\n    handleFetch(id);\n\n    if (response.status === 200) {\n      debugger;\n      history.push('/student/' + id);\n    } else if (response.status === 401) {\n      let responseJson = response.json();\n      let error = responseJson.errors[0].msg;\n      setServerError(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      id: \"\"\n    },\n    onSubmit: values => {\n      loginIn(values.id);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, ({\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, \"Student Id\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"student id\",\n    name: \"id\",\n    onChange: handleChange,\n    className: errors.id ? \"error\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }), errors.id && touched.id ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 32\n    }\n  }, errors.id) : null, serverError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 41\n    }\n  }, serverError)), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Submit\")));\n};\n\nexport default Student;","map":{"version":3,"sources":["C:/Users/ferid/Desktop/Polito/Katya/client/src/components/Student/Student.jsx"],"names":["React","useContext","useState","Form","Button","Formik","Yup","useHistory","AuthContext","validationSchema","object","shape","id","string","required","handleFetch","response","fetch","method","body","JSON","stringify","headers","Student","dispatch","history","serverError","setServerError","loginIn","status","push","responseJson","json","error","errors","msg","values","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport '../Teacher/Teacher.css';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport {useHistory} from \"react-router\";\r\nimport {AuthContext} from \"../../auth/authContext\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    id: Yup.string()\r\n        .required(\"Student Id is required\"),\r\n});\r\n\r\n\r\nexport async function handleFetch(id) {\r\n    let response=await fetch(\"http://localhost:3000/api/students/login\",{\r\n        method: \"POST\",\r\n        body: JSON.stringify({id}),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n\r\n    })\r\n\r\n   return response\r\n\r\n\r\n    // GET STUDENT ID FROM SERVER AND SEND IT TO REDUCER\r\n\r\n}\r\n\r\n\r\nconst Student = () => {\r\n    const {dispatch}=useContext(AuthContext)\r\n    const history = useHistory()\r\n    const [serverError, setServerError]=useState(\"\")\r\n\r\n    const loginIn =  (id) => {\r\n         handleFetch(id)\r\n\r\n            if (response.status === 200) {\r\n                debugger\r\n                history.push('/student/'+id)\r\n            } else if(response.status===401){\r\n                let responseJson= response.json()\r\n                let error=responseJson.errors[0].msg\r\n                setServerError(error)\r\n\r\n            }\r\n        }\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{id: \"\"}}\r\n            onSubmit={values => {\r\n                loginIn(values.id)\r\n              }\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleSubmit\r\n\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Student Id</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"student id\"\r\n                            name=\"id\"\r\n                            onChange={handleChange}\r\n                            className={errors.id ? \"error\" : null}\r\n\r\n                        />\r\n                        {errors.id && touched.id\r\n                            ? (<div className=\"error-message\">{errors.id}</div>)\r\n                            : null\r\n                        }\r\n                        {serverError && <div className=\"error-message\">{serverError}</div>}\r\n                    </Form.Group>\r\n\r\n\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nexport default Student"]},"metadata":{},"sourceType":"module"}