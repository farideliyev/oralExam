{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferid\\\\Desktop\\\\Polito\\\\Katya\\\\client\\\\src\\\\components\\\\Teacher\\\\Teacher.jsx\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport './Teacher.css';\nimport { Formik } from 'formik';\nimport * as Yup from \"yup\";\nimport { useHistory, Route } from 'react-router-dom';\nimport authReducer from \"../../auth/authReducer\"; // import Admin from '../Admin/Admin';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\")\n});\n\nconst Teacher = props => {\n  const history = useHistory(); // const[isAuth, setIsAuth]=useState(false);\n  // const [user, setUser]=useState(null)\n  // useEffect(() => {\n  //     if(isAuth){\n  //        props.parentData(isAuth, user)\n  //     }\n  // })\n\n  useEffect(() => {});\n\n  const handleFetch = async values => {\n    let response = await fetch('http://localhost:3000/api/teachers/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: values.email,\n        password: values.password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); // if (response.status=== 200) {\n    //     let responseJson= await response.json()\n    //     setUser(responseJson)\n    //     setIsAuth(true)\n    //      console.log(isAuth +\" from fetch\")\n    //     history.push('/admin')\n    //\n    //\n    // }\n\n    if (response.status === 200) {\n      debugger; // let responseJson= await response.json()\n      //\n      // props.dispatch({\n      //     type:\"LOGIN\",\n      //     payload:responseJson\n      // })\n      // // setIsAuth(true)\n      // console.log(isAuth +\" from fetch\")\n      // history.push('/admin')\n    } else if (response.status === 500) {\n      history.push('/teacher');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: values => {\n      // setEmail(values.email)\n      // setPassword(values.password)\n      handleFetch(values);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, ({\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    name: \"email\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }), errors.email && touched.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), errors.password && touched.password ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, errors.password) : null), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nexport default Teacher;","map":{"version":3,"sources":["C:/Users/ferid/Desktop/Polito/Katya/client/src/components/Teacher/Teacher.jsx"],"names":["React","useState","useEffect","useReducer","Form","Button","Formik","Yup","useHistory","Route","authReducer","validationSchema","object","shape","email","string","required","password","Teacher","props","history","handleFetch","values","response","fetch","method","body","JSON","stringify","headers","status","push","errors","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useReducer} from 'react';\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport './Teacher.css';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { useHistory, Route} from 'react-router-dom';\r\nimport authReducer from \"../../auth/authReducer\";\r\n// import Admin from '../Admin/Admin';\r\n\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n    .required(\"Email is required\"),\r\n    password: Yup.string()\r\n     .required(\"Password is required\")\r\n  });\r\n\r\nconst Teacher=(props)=>{\r\n\r\n    const history = useHistory();\r\n    // const[isAuth, setIsAuth]=useState(false);\r\n    // const [user, setUser]=useState(null)\r\n\r\n    // useEffect(() => {\r\n    //     if(isAuth){\r\n    //        props.parentData(isAuth, user)\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n\r\n    })\r\n\r\n   const handleFetch = async (values) => {\r\n       \r\n    let response = await fetch('http://localhost:3000/api/teachers/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            email: values.email,\r\n            password: values.password\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n\r\n    })\r\n\r\n    // if (response.status=== 200) {\r\n    //     let responseJson= await response.json()\r\n    //     setUser(responseJson)\r\n    //     setIsAuth(true)\r\n    //      console.log(isAuth +\" from fetch\")\r\n    //     history.push('/admin')\r\n    //\r\n    //\r\n    // }\r\n\r\n       if (response.status=== 200) {\r\n           debugger\r\n           // let responseJson= await response.json()\r\n           //\r\n           // props.dispatch({\r\n           //     type:\"LOGIN\",\r\n           //     payload:responseJson\r\n           // })\r\n           // // setIsAuth(true)\r\n           // console.log(isAuth +\" from fetch\")\r\n           // history.push('/admin')\r\n\r\n       }\r\n\r\n    else if(response.status===500){\r\n        history.push('/teacher')\r\n    }\r\n}\r\n    return (\r\n        <Formik\r\n        initialValues={{email:\"\", password:\"\"}} \r\n        onSubmit={values=>{\r\n            // setEmail(values.email)\r\n            // setPassword(values.password)\r\n            handleFetch(values)\r\n        }}  \r\n        validationSchema={validationSchema}\r\n        > \r\n        {({errors,\r\n            touched,\r\n            handleChange,\r\n            handleSubmit\r\n           }) => (\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                    type=\"email\" \r\n                    placeholder=\"Enter email\"  \r\n                    name=\"email\"\r\n                    onChange={handleChange}  \r\n                    />\r\n                    {errors.email && touched.email\r\n                     ? (<div className=\"error-message\">{errors.email}</div>)\r\n                     : null\r\n                     }\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control \r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    name=\"password\"\r\n                    onChange={handleChange}\r\n                    />\r\n                     {errors.password && touched.password\r\n                     ? (<div className=\"error-message\">{errors.password}</div>)\r\n                     : null\r\n                     }\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n              </Button>\r\n            </Form>\r\n             )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nexport default Teacher"]},"metadata":{},"sourceType":"module"}