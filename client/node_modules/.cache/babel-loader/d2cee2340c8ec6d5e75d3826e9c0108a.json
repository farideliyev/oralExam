{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferid\\\\Desktop\\\\Polito\\\\Katya\\\\client\\\\src\\\\components\\\\Teacher\\\\Teacher.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport './Teacher.css';\nimport { Formik } from 'formik';\nimport * as Yup from \"yup\";\nimport { Redirect } from 'react-router-dom';\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\")\n});\n\nconst Teacher = props => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); // useEffect(()=>{\n  //    handleFetch()\n  // },[])\n\n  const handleFetch = async values => {\n    let response = await fetch('http://localhost:3000/api/teachers/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: values.email,\n        password: values.password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.statusText === \"DONE\") {\n      console.log(response);\n      return /*#__PURE__*/React.createElement(Redirect, {\n        from: \"/teacher\",\n        to: \"/admin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 16\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: values => {\n      // setEmail(values.email)\n      // setPassword(values.password)\n      handleFetch(values);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, ({\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    name: \"email\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }), errors.email && touched.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }), errors.password && touched.password ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, errors.password) : null), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nexport default Teacher;","map":{"version":3,"sources":["C:/Users/ferid/Desktop/Polito/Katya/client/src/components/Teacher/Teacher.jsx"],"names":["React","useState","useEffect","Form","Button","Formik","Yup","Redirect","validationSchema","object","shape","email","string","required","password","Teacher","props","isLoggedIn","setIsLoggedIn","setEmail","setPassword","handleFetch","values","response","fetch","method","body","JSON","stringify","headers","statusText","console","log","errors","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport './Teacher.css';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n    .required(\"Email is required\"),\r\n    password: Yup.string()\r\n     .required(\"Password is required\")\r\n  });\r\n\r\nconst Teacher=(props)=>{\r\n     \r\n    const[isLoggedIn, setIsLoggedIn]=useState(false);\r\n    const[email, setEmail]=useState(\"\");\r\n    const[password, setPassword]=useState(\"\");\r\n\r\n    // useEffect(()=>{\r\n    //    handleFetch()\r\n    // },[])\r\n\r\n   const handleFetch = async (values) => {\r\n    let response = await fetch('http://localhost:3000/api/teachers/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            email: values.email,\r\n            password: values.password\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n\r\n    })\r\n\r\n    if (response.statusText === \"DONE\") {\r\n        console.log(response)\r\n    \r\n        return <Redirect from=\"/teacher\" to=\"/admin\" />\r\n    } \r\n}\r\n\r\n    \r\n    return (\r\n        <Formik\r\n        initialValues={{email:\"\", password:\"\"}} \r\n        onSubmit={values=>{\r\n            // setEmail(values.email)\r\n            // setPassword(values.password)\r\n            handleFetch(values)\r\n        }}  \r\n        validationSchema={validationSchema}\r\n        > \r\n        {({errors,\r\n            touched,\r\n            handleChange,\r\n            handleSubmit\r\n           }) => (\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                    type=\"email\" \r\n                    placeholder=\"Enter email\"  \r\n                    name=\"email\"\r\n                    onChange={handleChange}  \r\n                    />\r\n                    {errors.email && touched.email\r\n                     ? (<div className=\"error-message\">{errors.email}</div>)\r\n                     : null\r\n                     }\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control \r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    name=\"password\"\r\n                    onChange={handleChange}\r\n                    />\r\n                     {errors.password && touched.password\r\n                     ? (<div className=\"error-message\">{errors.password}</div>)\r\n                     : null\r\n                     }\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n              </Button>\r\n            </Form>\r\n             )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nexport default Teacher"]},"metadata":{},"sourceType":"module"}