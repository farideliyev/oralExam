{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferid\\\\Desktop\\\\Polito\\\\Katya\\\\client\\\\src\\\\components\\\\Student\\\\Student.jsx\";\nimport React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport '../Teacher/Teacher.css';\nimport { Formik } from 'formik';\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router\";\nconst validationSchema = Yup.object().shape({\n  id: Yup.string().required(\"Student Id is required\")\n});\n\nconst Student = () => {\n  const history = useHistory();\n\n  async function handleFetch(id) {\n    let response = await fetch(\"http://localhost:3000/api/students/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.status === 200) {\n      debugger;\n      history.push('/student/' + id);\n    } else if (response.status === 401) {\n      let error = await response.json();\n      console.log(error.errors[0]);\n      debugger;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      id: \"\"\n    },\n    onSubmit: values => {\n      handleFetch(values.id);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, ({\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Student Id\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"number\",\n    placeholder: \"student id\",\n    name: \"id\",\n    onChange: handleChange,\n    className: errors.id ? \"error\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }), errors.id && touched.id ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 32\n    }\n  }, errors.id) : null), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Submit\")));\n};\n\nexport default Student;","map":{"version":3,"sources":["C:/Users/ferid/Desktop/Polito/Katya/client/src/components/Student/Student.jsx"],"names":["React","Form","Button","Formik","Yup","useHistory","validationSchema","object","shape","id","string","required","Student","history","handleFetch","response","fetch","method","body","JSON","stringify","headers","status","push","error","json","console","log","errors","values","touched","handleChange","handleSubmit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,iBAA3B;AACA,OAAO,wBAAP;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAGA,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,EAAE,EAAEL,GAAG,CAACM,MAAJ,GACCC,QADD,CACU,wBADV;AADoC,CAAnB,CAAzB;;AAKA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAMC,OAAO,GAAGR,UAAU,EAA1B;;AAEA,iBAAeS,WAAf,CAA2BL,EAA3B,EAA+B;AAC3B,QAAIM,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA4C;AAClEC,MAAAA,MAAM,EAAE,MAD0D;AAElEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACX,QAAAA;AAAD,OAAf,CAF4D;AAGlEY,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHyD,KAA5C,CAA1B;;AASA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAT,MAAAA,OAAO,CAACU,IAAR,CAAa,cAAYd,EAAzB;AACH,KAHD,MAGO,IAAGM,QAAQ,CAACO,MAAT,KAAkB,GAArB,EAAyB;AAC5B,UAAIE,KAAK,GAAC,MAAMT,QAAQ,CAACU,IAAT,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,MAAN,CAAa,CAAb,CAAZ;AACA;AACH;AACJ;;AAED,sBACI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAE;AAACnB,MAAAA,EAAE,EAAE;AAAL,KADnB;AAEI,IAAA,QAAQ,EAAEoB,MAAM,IAAI;AAChBf,MAAAA,WAAW,CAACe,MAAM,CAACpB,EAAR,CAAX;AACD,KAJP;AAMI,IAAA,gBAAgB,EAAEH,gBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQK,CAAC;AACIsB,IAAAA,MADJ;AAEIE,IAAAA,OAFJ;AAGIC,IAAAA,YAHJ;AAIIC,IAAAA;AAJJ,GAAD,kBAOG,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,WAAW,EAAC,YAFhB;AAGI,IAAA,IAAI,EAAC,IAHT;AAII,IAAA,QAAQ,EAAED,YAJd;AAKI,IAAA,SAAS,EAAEH,MAAM,CAACnB,EAAP,GAAY,OAAZ,GAAsB,IALrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAUKmB,MAAM,CAACnB,EAAP,IAAaqB,OAAO,CAACrB,EAArB,gBACM;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCmB,MAAM,CAACnB,EAAvC,CADN,GAEK,IAZV,CAHJ,eAoBI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ,CAfR,CADJ;AA2CH,CAlED;;AAqEA,eAAeG,OAAf","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport '../Teacher/Teacher.css';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    id: Yup.string()\r\n        .required(\"Student Id is required\"),\r\n});\r\n\r\nconst Student = () => {\r\n    const history = useHistory()\r\n\r\n    async function handleFetch(id) {\r\n        let response = await fetch(\"http://localhost:3000/api/students/login\",{\r\n            method: \"POST\",\r\n            body: JSON.stringify({id}),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n\r\n\r\n        })\r\n        if (response.status === 200) {\r\n            debugger\r\n            history.push('/student/'+id)\r\n        } else if(response.status===401){\r\n            let error=await response.json()\r\n            console.log(error.errors[0])\r\n            debugger\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{id: \"\"}}\r\n            onSubmit={values => {\r\n                handleFetch(values.id)\r\n              }\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleSubmit\r\n\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Student Id</Form.Label>\r\n                        <Form.Control\r\n                            type=\"number\"\r\n                            placeholder=\"student id\"\r\n                            name=\"id\"\r\n                            onChange={handleChange}\r\n                            className={errors.id ? \"error\" : null}\r\n\r\n                        />\r\n                        {errors.id && touched.id\r\n                            ? (<div className=\"error-message\">{errors.id}</div>)\r\n                            : null\r\n                        }\r\n                    </Form.Group>\r\n\r\n\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nexport default Student"]},"metadata":{},"sourceType":"module"}